# source: https://eu1.prisma.sh/shevchenko_yury-d70d0e/mindHive-backend/dev
# timestamp: Tue Feb 11 2020 15:31:32 GMT+0100 (Central European Standard Time)

type AggregateAuthEmail {
  count: Int!
}

type AggregateAuthInvite {
  count: Int!
}

type AggregateAuthToken {
  count: Int!
}

type AggregateExperiment {
  count: Int!
}

type AggregateProfile {
  count: Int!
}

type AggregateResult {
  count: Int!
}

type AggregateSchool {
  count: Int!
}

type AuthEmail implements Node {
  id: ID!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  profile: Profile!
}

"""A connection to a list of items."""
type AuthEmailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthEmailEdge]!
  aggregate: AggregateAuthEmail!
}

input AuthEmailCreateInput {
  id: ID
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  profile: ProfileCreateOneWithoutAuthEmailInput!
}

input AuthEmailCreateManyWithoutProfileInput {
  create: [AuthEmailCreateWithoutProfileInput!]
  connect: [AuthEmailWhereUniqueInput!]
}

input AuthEmailCreateWithoutProfileInput {
  id: ID
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
}

"""An edge in a connection."""
type AuthEmailEdge {
  """The item at the end of the edge."""
  node: AuthEmail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuthEmailOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type AuthEmailPreviousValues {
  id: ID!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
}

input AuthEmailScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthEmailScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthEmailScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthEmailScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: String

  """All values that are not equal to given value."""
  resetTokenExpiry_not: String

  """All values that are contained in given list."""
  resetTokenExpiry_in: [String!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [String!]

  """All values less than the given value."""
  resetTokenExpiry_lt: String

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: String

  """All values greater than the given value."""
  resetTokenExpiry_gt: String

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: String

  """All values containing the given string."""
  resetTokenExpiry_contains: String

  """All values not containing the given string."""
  resetTokenExpiry_not_contains: String

  """All values starting with the given string."""
  resetTokenExpiry_starts_with: String

  """All values not starting with the given string."""
  resetTokenExpiry_not_starts_with: String

  """All values ending with the given string."""
  resetTokenExpiry_ends_with: String

  """All values not ending with the given string."""
  resetTokenExpiry_not_ends_with: String
}

type AuthEmailSubscriptionPayload {
  mutation: MutationType!
  node: AuthEmail
  updatedFields: [String!]
  previousValues: AuthEmailPreviousValues
}

input AuthEmailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthEmailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthEmailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthEmailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthEmailWhereInput
}

input AuthEmailUpdateInput {
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  profile: ProfileUpdateOneRequiredWithoutAuthEmailInput
}

input AuthEmailUpdateManyDataInput {
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
}

input AuthEmailUpdateManyMutationInput {
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
}

input AuthEmailUpdateManyWithoutProfileInput {
  create: [AuthEmailCreateWithoutProfileInput!]
  connect: [AuthEmailWhereUniqueInput!]
  set: [AuthEmailWhereUniqueInput!]
  disconnect: [AuthEmailWhereUniqueInput!]
  delete: [AuthEmailWhereUniqueInput!]
  update: [AuthEmailUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [AuthEmailUpdateManyWithWhereNestedInput!]
  deleteMany: [AuthEmailScalarWhereInput!]
  upsert: [AuthEmailUpsertWithWhereUniqueWithoutProfileInput!]
}

input AuthEmailUpdateManyWithWhereNestedInput {
  where: AuthEmailScalarWhereInput!
  data: AuthEmailUpdateManyDataInput!
}

input AuthEmailUpdateWithoutProfileDataInput {
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
}

input AuthEmailUpdateWithWhereUniqueWithoutProfileInput {
  where: AuthEmailWhereUniqueInput!
  data: AuthEmailUpdateWithoutProfileDataInput!
}

input AuthEmailUpsertWithWhereUniqueWithoutProfileInput {
  where: AuthEmailWhereUniqueInput!
  update: AuthEmailUpdateWithoutProfileDataInput!
  create: AuthEmailCreateWithoutProfileInput!
}

input AuthEmailWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthEmailWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthEmailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthEmailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: String

  """All values that are not equal to given value."""
  resetTokenExpiry_not: String

  """All values that are contained in given list."""
  resetTokenExpiry_in: [String!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [String!]

  """All values less than the given value."""
  resetTokenExpiry_lt: String

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: String

  """All values greater than the given value."""
  resetTokenExpiry_gt: String

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: String

  """All values containing the given string."""
  resetTokenExpiry_contains: String

  """All values not containing the given string."""
  resetTokenExpiry_not_contains: String

  """All values starting with the given string."""
  resetTokenExpiry_starts_with: String

  """All values not starting with the given string."""
  resetTokenExpiry_not_starts_with: String

  """All values ending with the given string."""
  resetTokenExpiry_ends_with: String

  """All values not ending with the given string."""
  resetTokenExpiry_not_ends_with: String
  profile: ProfileWhereInput
}

input AuthEmailWhereUniqueInput {
  id: ID
  email: String
}

type AuthInvite implements Node {
  id: ID!
  profile: Profile!
  invitedBy: Profile!
}

"""A connection to a list of items."""
type AuthInviteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthInviteEdge]!
  aggregate: AggregateAuthInvite!
}

input AuthInviteCreateInput {
  id: ID
  profile: ProfileCreateOneWithoutAuthInviteInput!
  invitedBy: ProfileCreateOneWithoutInvitesInput!
}

input AuthInviteCreateManyWithoutInvitedByInput {
  create: [AuthInviteCreateWithoutInvitedByInput!]
  connect: [AuthInviteWhereUniqueInput!]
}

input AuthInviteCreateManyWithoutProfileInput {
  create: [AuthInviteCreateWithoutProfileInput!]
  connect: [AuthInviteWhereUniqueInput!]
}

input AuthInviteCreateWithoutInvitedByInput {
  id: ID
  profile: ProfileCreateOneWithoutAuthInviteInput!
}

input AuthInviteCreateWithoutProfileInput {
  id: ID
  invitedBy: ProfileCreateOneWithoutInvitesInput!
}

"""An edge in a connection."""
type AuthInviteEdge {
  """The item at the end of the edge."""
  node: AuthInvite!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuthInviteOrderByInput {
  id_ASC
  id_DESC
}

type AuthInvitePreviousValues {
  id: ID!
}

input AuthInviteScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthInviteScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthInviteScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthInviteScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type AuthInviteSubscriptionPayload {
  mutation: MutationType!
  node: AuthInvite
  updatedFields: [String!]
  previousValues: AuthInvitePreviousValues
}

input AuthInviteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthInviteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthInviteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthInviteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthInviteWhereInput
}

input AuthInviteUpdateInput {
  profile: ProfileUpdateOneRequiredWithoutAuthInviteInput
  invitedBy: ProfileUpdateOneRequiredWithoutInvitesInput
}

input AuthInviteUpdateManyWithoutInvitedByInput {
  create: [AuthInviteCreateWithoutInvitedByInput!]
  connect: [AuthInviteWhereUniqueInput!]
  set: [AuthInviteWhereUniqueInput!]
  disconnect: [AuthInviteWhereUniqueInput!]
  delete: [AuthInviteWhereUniqueInput!]
  update: [AuthInviteUpdateWithWhereUniqueWithoutInvitedByInput!]
  deleteMany: [AuthInviteScalarWhereInput!]
  upsert: [AuthInviteUpsertWithWhereUniqueWithoutInvitedByInput!]
}

input AuthInviteUpdateManyWithoutProfileInput {
  create: [AuthInviteCreateWithoutProfileInput!]
  connect: [AuthInviteWhereUniqueInput!]
  set: [AuthInviteWhereUniqueInput!]
  disconnect: [AuthInviteWhereUniqueInput!]
  delete: [AuthInviteWhereUniqueInput!]
  update: [AuthInviteUpdateWithWhereUniqueWithoutProfileInput!]
  deleteMany: [AuthInviteScalarWhereInput!]
  upsert: [AuthInviteUpsertWithWhereUniqueWithoutProfileInput!]
}

input AuthInviteUpdateWithoutInvitedByDataInput {
  profile: ProfileUpdateOneRequiredWithoutAuthInviteInput
}

input AuthInviteUpdateWithoutProfileDataInput {
  invitedBy: ProfileUpdateOneRequiredWithoutInvitesInput
}

input AuthInviteUpdateWithWhereUniqueWithoutInvitedByInput {
  where: AuthInviteWhereUniqueInput!
  data: AuthInviteUpdateWithoutInvitedByDataInput!
}

input AuthInviteUpdateWithWhereUniqueWithoutProfileInput {
  where: AuthInviteWhereUniqueInput!
  data: AuthInviteUpdateWithoutProfileDataInput!
}

input AuthInviteUpsertWithWhereUniqueWithoutInvitedByInput {
  where: AuthInviteWhereUniqueInput!
  update: AuthInviteUpdateWithoutInvitedByDataInput!
  create: AuthInviteCreateWithoutInvitedByInput!
}

input AuthInviteUpsertWithWhereUniqueWithoutProfileInput {
  where: AuthInviteWhereUniqueInput!
  update: AuthInviteUpdateWithoutProfileDataInput!
  create: AuthInviteCreateWithoutProfileInput!
}

input AuthInviteWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthInviteWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthInviteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthInviteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  profile: ProfileWhereInput
  invitedBy: ProfileWhereInput
}

input AuthInviteWhereUniqueInput {
  id: ID
}

type AuthToken implements Node {
  id: ID!
  token: String!
  tokenExpiry: String
  profile: Profile!
}

"""A connection to a list of items."""
type AuthTokenConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthTokenEdge]!
  aggregate: AggregateAuthToken!
}

input AuthTokenCreateInput {
  id: ID
  token: String!
  tokenExpiry: String
  profile: ProfileCreateOneWithoutAuthTokenInput!
}

input AuthTokenCreateManyWithoutProfileInput {
  create: [AuthTokenCreateWithoutProfileInput!]
  connect: [AuthTokenWhereUniqueInput!]
}

input AuthTokenCreateWithoutProfileInput {
  id: ID
  token: String!
  tokenExpiry: String
}

"""An edge in a connection."""
type AuthTokenEdge {
  """The item at the end of the edge."""
  node: AuthToken!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuthTokenOrderByInput {
  id_ASC
  id_DESC
  token_ASC
  token_DESC
  tokenExpiry_ASC
  tokenExpiry_DESC
}

type AuthTokenPreviousValues {
  id: ID!
  token: String!
  tokenExpiry: String
}

input AuthTokenScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthTokenScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthTokenScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthTokenScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  tokenExpiry: String

  """All values that are not equal to given value."""
  tokenExpiry_not: String

  """All values that are contained in given list."""
  tokenExpiry_in: [String!]

  """All values that are not contained in given list."""
  tokenExpiry_not_in: [String!]

  """All values less than the given value."""
  tokenExpiry_lt: String

  """All values less than or equal the given value."""
  tokenExpiry_lte: String

  """All values greater than the given value."""
  tokenExpiry_gt: String

  """All values greater than or equal the given value."""
  tokenExpiry_gte: String

  """All values containing the given string."""
  tokenExpiry_contains: String

  """All values not containing the given string."""
  tokenExpiry_not_contains: String

  """All values starting with the given string."""
  tokenExpiry_starts_with: String

  """All values not starting with the given string."""
  tokenExpiry_not_starts_with: String

  """All values ending with the given string."""
  tokenExpiry_ends_with: String

  """All values not ending with the given string."""
  tokenExpiry_not_ends_with: String
}

type AuthTokenSubscriptionPayload {
  mutation: MutationType!
  node: AuthToken
  updatedFields: [String!]
  previousValues: AuthTokenPreviousValues
}

input AuthTokenSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthTokenSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthTokenSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthTokenSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthTokenWhereInput
}

input AuthTokenUpdateInput {
  token: String
  tokenExpiry: String
  profile: ProfileUpdateOneRequiredWithoutAuthTokenInput
}

input AuthTokenUpdateManyDataInput {
  token: String
  tokenExpiry: String
}

input AuthTokenUpdateManyMutationInput {
  token: String
  tokenExpiry: String
}

input AuthTokenUpdateManyWithoutProfileInput {
  create: [AuthTokenCreateWithoutProfileInput!]
  connect: [AuthTokenWhereUniqueInput!]
  set: [AuthTokenWhereUniqueInput!]
  disconnect: [AuthTokenWhereUniqueInput!]
  delete: [AuthTokenWhereUniqueInput!]
  update: [AuthTokenUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [AuthTokenUpdateManyWithWhereNestedInput!]
  deleteMany: [AuthTokenScalarWhereInput!]
  upsert: [AuthTokenUpsertWithWhereUniqueWithoutProfileInput!]
}

input AuthTokenUpdateManyWithWhereNestedInput {
  where: AuthTokenScalarWhereInput!
  data: AuthTokenUpdateManyDataInput!
}

input AuthTokenUpdateWithoutProfileDataInput {
  token: String
  tokenExpiry: String
}

input AuthTokenUpdateWithWhereUniqueWithoutProfileInput {
  where: AuthTokenWhereUniqueInput!
  data: AuthTokenUpdateWithoutProfileDataInput!
}

input AuthTokenUpsertWithWhereUniqueWithoutProfileInput {
  where: AuthTokenWhereUniqueInput!
  update: AuthTokenUpdateWithoutProfileDataInput!
  create: AuthTokenCreateWithoutProfileInput!
}

input AuthTokenWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthTokenWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthTokenWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthTokenWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  tokenExpiry: String

  """All values that are not equal to given value."""
  tokenExpiry_not: String

  """All values that are contained in given list."""
  tokenExpiry_in: [String!]

  """All values that are not contained in given list."""
  tokenExpiry_not_in: [String!]

  """All values less than the given value."""
  tokenExpiry_lt: String

  """All values less than or equal the given value."""
  tokenExpiry_lte: String

  """All values greater than the given value."""
  tokenExpiry_gt: String

  """All values greater than or equal the given value."""
  tokenExpiry_gte: String

  """All values containing the given string."""
  tokenExpiry_contains: String

  """All values not containing the given string."""
  tokenExpiry_not_contains: String

  """All values starting with the given string."""
  tokenExpiry_starts_with: String

  """All values not starting with the given string."""
  tokenExpiry_not_starts_with: String

  """All values ending with the given string."""
  tokenExpiry_ends_with: String

  """All values not ending with the given string."""
  tokenExpiry_not_ends_with: String
  profile: ProfileWhereInput
}

input AuthTokenWhereUniqueInput {
  id: ID
  token: String
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Experiment implements Node {
  id: ID!
  title: String!
  description: String
  image: String
  largeImage: String
  createdAt: DateTime!
  updatedAt: DateTime!
  author: Profile!
}

"""A connection to a list of items."""
type ExperimentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExperimentEdge]!
  aggregate: AggregateExperiment!
}

input ExperimentCreateInput {
  id: ID
  title: String!
  description: String
  image: String
  largeImage: String
  author: ProfileCreateOneInput!
}

input ExperimentCreateOneInput {
  create: ExperimentCreateInput
  connect: ExperimentWhereUniqueInput
}

"""An edge in a connection."""
type ExperimentEdge {
  """The item at the end of the edge."""
  node: Experiment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ExperimentOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  largeImage_ASC
  largeImage_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ExperimentPreviousValues {
  id: ID!
  title: String!
  description: String
  image: String
  largeImage: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ExperimentSubscriptionPayload {
  mutation: MutationType!
  node: Experiment
  updatedFields: [String!]
  previousValues: ExperimentPreviousValues
}

input ExperimentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExperimentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExperimentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExperimentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ExperimentWhereInput
}

input ExperimentUpdateDataInput {
  title: String
  description: String
  image: String
  largeImage: String
  author: ProfileUpdateOneRequiredInput
}

input ExperimentUpdateInput {
  title: String
  description: String
  image: String
  largeImage: String
  author: ProfileUpdateOneRequiredInput
}

input ExperimentUpdateManyMutationInput {
  title: String
  description: String
  image: String
  largeImage: String
}

input ExperimentUpdateOneRequiredInput {
  create: ExperimentCreateInput
  connect: ExperimentWhereUniqueInput
  update: ExperimentUpdateDataInput
  upsert: ExperimentUpsertNestedInput
}

input ExperimentUpsertNestedInput {
  update: ExperimentUpdateDataInput!
  create: ExperimentCreateInput!
}

input ExperimentWhereInput {
  """Logical AND on all given filters."""
  AND: [ExperimentWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExperimentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExperimentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: ProfileWhereInput
}

input ExperimentWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAuthEmail(data: AuthEmailCreateInput!): AuthEmail!
  createAuthToken(data: AuthTokenCreateInput!): AuthToken!
  createAuthInvite(data: AuthInviteCreateInput!): AuthInvite!
  createSchool(data: SchoolCreateInput!): School!
  createResult(data: ResultCreateInput!): Result!
  createExperiment(data: ExperimentCreateInput!): Experiment!
  createProfile(data: ProfileCreateInput!): Profile!
  updateAuthEmail(data: AuthEmailUpdateInput!, where: AuthEmailWhereUniqueInput!): AuthEmail
  updateAuthToken(data: AuthTokenUpdateInput!, where: AuthTokenWhereUniqueInput!): AuthToken
  updateAuthInvite(data: AuthInviteUpdateInput!, where: AuthInviteWhereUniqueInput!): AuthInvite
  updateSchool(data: SchoolUpdateInput!, where: SchoolWhereUniqueInput!): School
  updateResult(data: ResultUpdateInput!, where: ResultWhereUniqueInput!): Result
  updateExperiment(data: ExperimentUpdateInput!, where: ExperimentWhereUniqueInput!): Experiment
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  deleteAuthEmail(where: AuthEmailWhereUniqueInput!): AuthEmail
  deleteAuthToken(where: AuthTokenWhereUniqueInput!): AuthToken
  deleteAuthInvite(where: AuthInviteWhereUniqueInput!): AuthInvite
  deleteSchool(where: SchoolWhereUniqueInput!): School
  deleteResult(where: ResultWhereUniqueInput!): Result
  deleteExperiment(where: ExperimentWhereUniqueInput!): Experiment
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  upsertAuthEmail(where: AuthEmailWhereUniqueInput!, create: AuthEmailCreateInput!, update: AuthEmailUpdateInput!): AuthEmail!
  upsertAuthToken(where: AuthTokenWhereUniqueInput!, create: AuthTokenCreateInput!, update: AuthTokenUpdateInput!): AuthToken!
  upsertAuthInvite(where: AuthInviteWhereUniqueInput!, create: AuthInviteCreateInput!, update: AuthInviteUpdateInput!): AuthInvite!
  upsertSchool(where: SchoolWhereUniqueInput!, create: SchoolCreateInput!, update: SchoolUpdateInput!): School!
  upsertResult(where: ResultWhereUniqueInput!, create: ResultCreateInput!, update: ResultUpdateInput!): Result!
  upsertExperiment(where: ExperimentWhereUniqueInput!, create: ExperimentCreateInput!, update: ExperimentUpdateInput!): Experiment!
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  updateManyAuthEmails(data: AuthEmailUpdateManyMutationInput!, where: AuthEmailWhereInput): BatchPayload!
  updateManyAuthTokens(data: AuthTokenUpdateManyMutationInput!, where: AuthTokenWhereInput): BatchPayload!
  updateManySchools(data: SchoolUpdateManyMutationInput!, where: SchoolWhereInput): BatchPayload!
  updateManyResults(data: ResultUpdateManyMutationInput!, where: ResultWhereInput): BatchPayload!
  updateManyExperiments(data: ExperimentUpdateManyMutationInput!, where: ExperimentWhereInput): BatchPayload!
  updateManyProfiles(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): BatchPayload!
  deleteManyAuthEmails(where: AuthEmailWhereInput): BatchPayload!
  deleteManyAuthTokens(where: AuthTokenWhereInput): BatchPayload!
  deleteManyAuthInvites(where: AuthInviteWhereInput): BatchPayload!
  deleteManySchools(where: SchoolWhereInput): BatchPayload!
  deleteManyResults(where: ResultWhereInput): BatchPayload!
  deleteManyExperiments(where: ExperimentWhereInput): BatchPayload!
  deleteManyProfiles(where: ProfileWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  IT
  ADMIN
  SCIENTIST
  MENTOR
  TEACHER
  STUDENT
  PARTICIPANT
}

type Profile implements Node {
  id: ID!
  username: String!
  permissions: [Permission!]!
  authEmail(where: AuthEmailWhereInput, orderBy: AuthEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthEmail!]
  authToken(where: AuthTokenWhereInput, orderBy: AuthTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthToken!]
  authInvite(where: AuthInviteWhereInput, orderBy: AuthInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthInvite!]
  invites(where: AuthInviteWhereInput, orderBy: AuthInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthInvite!]
  results(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
}

"""A connection to a list of items."""
type ProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProfileEdge]!
  aggregate: AggregateProfile!
}

input ProfileCreateInput {
  id: ID
  username: String!
  permissions: ProfileCreatepermissionsInput
  authEmail: AuthEmailCreateManyWithoutProfileInput
  authToken: AuthTokenCreateManyWithoutProfileInput
  authInvite: AuthInviteCreateManyWithoutProfileInput
  invites: AuthInviteCreateManyWithoutInvitedByInput
  results: ResultCreateManyWithoutUserInput
}

input ProfileCreateOneInput {
  create: ProfileCreateInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOneWithoutAuthEmailInput {
  create: ProfileCreateWithoutAuthEmailInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOneWithoutAuthInviteInput {
  create: ProfileCreateWithoutAuthInviteInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOneWithoutAuthTokenInput {
  create: ProfileCreateWithoutAuthTokenInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOneWithoutInvitesInput {
  create: ProfileCreateWithoutInvitesInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOneWithoutResultsInput {
  create: ProfileCreateWithoutResultsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreatepermissionsInput {
  set: [Permission!]
}

input ProfileCreateWithoutAuthEmailInput {
  id: ID
  username: String!
  permissions: ProfileCreatepermissionsInput
  authToken: AuthTokenCreateManyWithoutProfileInput
  authInvite: AuthInviteCreateManyWithoutProfileInput
  invites: AuthInviteCreateManyWithoutInvitedByInput
  results: ResultCreateManyWithoutUserInput
}

input ProfileCreateWithoutAuthInviteInput {
  id: ID
  username: String!
  permissions: ProfileCreatepermissionsInput
  authEmail: AuthEmailCreateManyWithoutProfileInput
  authToken: AuthTokenCreateManyWithoutProfileInput
  invites: AuthInviteCreateManyWithoutInvitedByInput
  results: ResultCreateManyWithoutUserInput
}

input ProfileCreateWithoutAuthTokenInput {
  id: ID
  username: String!
  permissions: ProfileCreatepermissionsInput
  authEmail: AuthEmailCreateManyWithoutProfileInput
  authInvite: AuthInviteCreateManyWithoutProfileInput
  invites: AuthInviteCreateManyWithoutInvitedByInput
  results: ResultCreateManyWithoutUserInput
}

input ProfileCreateWithoutInvitesInput {
  id: ID
  username: String!
  permissions: ProfileCreatepermissionsInput
  authEmail: AuthEmailCreateManyWithoutProfileInput
  authToken: AuthTokenCreateManyWithoutProfileInput
  authInvite: AuthInviteCreateManyWithoutProfileInput
  results: ResultCreateManyWithoutUserInput
}

input ProfileCreateWithoutResultsInput {
  id: ID
  username: String!
  permissions: ProfileCreatepermissionsInput
  authEmail: AuthEmailCreateManyWithoutProfileInput
  authToken: AuthTokenCreateManyWithoutProfileInput
  authInvite: AuthInviteCreateManyWithoutProfileInput
  invites: AuthInviteCreateManyWithoutInvitedByInput
}

"""An edge in a connection."""
type ProfileEdge {
  """The item at the end of the edge."""
  node: Profile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProfileOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
}

type ProfilePreviousValues {
  id: ID!
  username: String!
  permissions: [Permission!]!
}

type ProfileSubscriptionPayload {
  mutation: MutationType!
  node: Profile
  updatedFields: [String!]
  previousValues: ProfilePreviousValues
}

input ProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProfileWhereInput
}

input ProfileUpdateDataInput {
  username: String
  permissions: ProfileUpdatepermissionsInput
  authEmail: AuthEmailUpdateManyWithoutProfileInput
  authToken: AuthTokenUpdateManyWithoutProfileInput
  authInvite: AuthInviteUpdateManyWithoutProfileInput
  invites: AuthInviteUpdateManyWithoutInvitedByInput
  results: ResultUpdateManyWithoutUserInput
}

input ProfileUpdateInput {
  username: String
  permissions: ProfileUpdatepermissionsInput
  authEmail: AuthEmailUpdateManyWithoutProfileInput
  authToken: AuthTokenUpdateManyWithoutProfileInput
  authInvite: AuthInviteUpdateManyWithoutProfileInput
  invites: AuthInviteUpdateManyWithoutInvitedByInput
  results: ResultUpdateManyWithoutUserInput
}

input ProfileUpdateManyMutationInput {
  username: String
  permissions: ProfileUpdatepermissionsInput
}

input ProfileUpdateOneRequiredInput {
  create: ProfileCreateInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateDataInput
  upsert: ProfileUpsertNestedInput
}

input ProfileUpdateOneRequiredWithoutAuthEmailInput {
  create: ProfileCreateWithoutAuthEmailInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutAuthEmailDataInput
  upsert: ProfileUpsertWithoutAuthEmailInput
}

input ProfileUpdateOneRequiredWithoutAuthInviteInput {
  create: ProfileCreateWithoutAuthInviteInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutAuthInviteDataInput
  upsert: ProfileUpsertWithoutAuthInviteInput
}

input ProfileUpdateOneRequiredWithoutAuthTokenInput {
  create: ProfileCreateWithoutAuthTokenInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutAuthTokenDataInput
  upsert: ProfileUpsertWithoutAuthTokenInput
}

input ProfileUpdateOneRequiredWithoutInvitesInput {
  create: ProfileCreateWithoutInvitesInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutInvitesDataInput
  upsert: ProfileUpsertWithoutInvitesInput
}

input ProfileUpdateOneRequiredWithoutResultsInput {
  create: ProfileCreateWithoutResultsInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutResultsDataInput
  upsert: ProfileUpsertWithoutResultsInput
}

input ProfileUpdatepermissionsInput {
  set: [Permission!]
}

input ProfileUpdateWithoutAuthEmailDataInput {
  username: String
  permissions: ProfileUpdatepermissionsInput
  authToken: AuthTokenUpdateManyWithoutProfileInput
  authInvite: AuthInviteUpdateManyWithoutProfileInput
  invites: AuthInviteUpdateManyWithoutInvitedByInput
  results: ResultUpdateManyWithoutUserInput
}

input ProfileUpdateWithoutAuthInviteDataInput {
  username: String
  permissions: ProfileUpdatepermissionsInput
  authEmail: AuthEmailUpdateManyWithoutProfileInput
  authToken: AuthTokenUpdateManyWithoutProfileInput
  invites: AuthInviteUpdateManyWithoutInvitedByInput
  results: ResultUpdateManyWithoutUserInput
}

input ProfileUpdateWithoutAuthTokenDataInput {
  username: String
  permissions: ProfileUpdatepermissionsInput
  authEmail: AuthEmailUpdateManyWithoutProfileInput
  authInvite: AuthInviteUpdateManyWithoutProfileInput
  invites: AuthInviteUpdateManyWithoutInvitedByInput
  results: ResultUpdateManyWithoutUserInput
}

input ProfileUpdateWithoutInvitesDataInput {
  username: String
  permissions: ProfileUpdatepermissionsInput
  authEmail: AuthEmailUpdateManyWithoutProfileInput
  authToken: AuthTokenUpdateManyWithoutProfileInput
  authInvite: AuthInviteUpdateManyWithoutProfileInput
  results: ResultUpdateManyWithoutUserInput
}

input ProfileUpdateWithoutResultsDataInput {
  username: String
  permissions: ProfileUpdatepermissionsInput
  authEmail: AuthEmailUpdateManyWithoutProfileInput
  authToken: AuthTokenUpdateManyWithoutProfileInput
  authInvite: AuthInviteUpdateManyWithoutProfileInput
  invites: AuthInviteUpdateManyWithoutInvitedByInput
}

input ProfileUpsertNestedInput {
  update: ProfileUpdateDataInput!
  create: ProfileCreateInput!
}

input ProfileUpsertWithoutAuthEmailInput {
  update: ProfileUpdateWithoutAuthEmailDataInput!
  create: ProfileCreateWithoutAuthEmailInput!
}

input ProfileUpsertWithoutAuthInviteInput {
  update: ProfileUpdateWithoutAuthInviteDataInput!
  create: ProfileCreateWithoutAuthInviteInput!
}

input ProfileUpsertWithoutAuthTokenInput {
  update: ProfileUpdateWithoutAuthTokenDataInput!
  create: ProfileCreateWithoutAuthTokenInput!
}

input ProfileUpsertWithoutInvitesInput {
  update: ProfileUpdateWithoutInvitesDataInput!
  create: ProfileCreateWithoutInvitesInput!
}

input ProfileUpsertWithoutResultsInput {
  update: ProfileUpdateWithoutResultsDataInput!
  create: ProfileCreateWithoutResultsInput!
}

input ProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  authEmail_every: AuthEmailWhereInput
  authEmail_some: AuthEmailWhereInput
  authEmail_none: AuthEmailWhereInput
  authToken_every: AuthTokenWhereInput
  authToken_some: AuthTokenWhereInput
  authToken_none: AuthTokenWhereInput
  authInvite_every: AuthInviteWhereInput
  authInvite_some: AuthInviteWhereInput
  authInvite_none: AuthInviteWhereInput
  invites_every: AuthInviteWhereInput
  invites_some: AuthInviteWhereInput
  invites_none: AuthInviteWhereInput
  results_every: ResultWhereInput
  results_some: ResultWhereInput
  results_none: ResultWhereInput
}

input ProfileWhereUniqueInput {
  id: ID
  username: String
}

type Query {
  authEmails(where: AuthEmailWhereInput, orderBy: AuthEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthEmail]!
  authTokens(where: AuthTokenWhereInput, orderBy: AuthTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthToken]!
  authInvites(where: AuthInviteWhereInput, orderBy: AuthInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthInvite]!
  schools(where: SchoolWhereInput, orderBy: SchoolOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [School]!
  results(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result]!
  experiments(where: ExperimentWhereInput, orderBy: ExperimentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Experiment]!
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile]!
  authEmail(where: AuthEmailWhereUniqueInput!): AuthEmail
  authToken(where: AuthTokenWhereUniqueInput!): AuthToken
  authInvite(where: AuthInviteWhereUniqueInput!): AuthInvite
  school(where: SchoolWhereUniqueInput!): School
  result(where: ResultWhereUniqueInput!): Result
  experiment(where: ExperimentWhereUniqueInput!): Experiment
  profile(where: ProfileWhereUniqueInput!): Profile
  authEmailsConnection(where: AuthEmailWhereInput, orderBy: AuthEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthEmailConnection!
  authTokensConnection(where: AuthTokenWhereInput, orderBy: AuthTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthTokenConnection!
  authInvitesConnection(where: AuthInviteWhereInput, orderBy: AuthInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthInviteConnection!
  schoolsConnection(where: SchoolWhereInput, orderBy: SchoolOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SchoolConnection!
  resultsConnection(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResultConnection!
  experimentsConnection(where: ExperimentWhereInput, orderBy: ExperimentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExperimentConnection!
  profilesConnection(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Result implements Node {
  id: ID!
  experiment: Experiment!
  user: Profile!
  quantity: Int!
  data: String
}

"""A connection to a list of items."""
type ResultConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResultEdge]!
  aggregate: AggregateResult!
}

input ResultCreateInput {
  id: ID
  quantity: Int!
  data: String
  experiment: ExperimentCreateOneInput!
  user: ProfileCreateOneWithoutResultsInput!
}

input ResultCreateManyWithoutUserInput {
  create: [ResultCreateWithoutUserInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateWithoutUserInput {
  id: ID
  quantity: Int!
  data: String
  experiment: ExperimentCreateOneInput!
}

"""An edge in a connection."""
type ResultEdge {
  """The item at the end of the edge."""
  node: Result!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ResultOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  data_ASC
  data_DESC
}

type ResultPreviousValues {
  id: ID!
  quantity: Int!
  data: String
}

input ResultScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ResultScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResultScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResultScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  data: String

  """All values that are not equal to given value."""
  data_not: String

  """All values that are contained in given list."""
  data_in: [String!]

  """All values that are not contained in given list."""
  data_not_in: [String!]

  """All values less than the given value."""
  data_lt: String

  """All values less than or equal the given value."""
  data_lte: String

  """All values greater than the given value."""
  data_gt: String

  """All values greater than or equal the given value."""
  data_gte: String

  """All values containing the given string."""
  data_contains: String

  """All values not containing the given string."""
  data_not_contains: String

  """All values starting with the given string."""
  data_starts_with: String

  """All values not starting with the given string."""
  data_not_starts_with: String

  """All values ending with the given string."""
  data_ends_with: String

  """All values not ending with the given string."""
  data_not_ends_with: String
}

type ResultSubscriptionPayload {
  mutation: MutationType!
  node: Result
  updatedFields: [String!]
  previousValues: ResultPreviousValues
}

input ResultSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ResultSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResultSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResultSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ResultWhereInput
}

input ResultUpdateInput {
  quantity: Int
  data: String
  experiment: ExperimentUpdateOneRequiredInput
  user: ProfileUpdateOneRequiredWithoutResultsInput
}

input ResultUpdateManyDataInput {
  quantity: Int
  data: String
}

input ResultUpdateManyMutationInput {
  quantity: Int
  data: String
}

input ResultUpdateManyWithoutUserInput {
  create: [ResultCreateWithoutUserInput!]
  connect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  delete: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
  deleteMany: [ResultScalarWhereInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutUserInput!]
}

input ResultUpdateManyWithWhereNestedInput {
  where: ResultScalarWhereInput!
  data: ResultUpdateManyDataInput!
}

input ResultUpdateWithoutUserDataInput {
  quantity: Int
  data: String
  experiment: ExperimentUpdateOneRequiredInput
}

input ResultUpdateWithWhereUniqueWithoutUserInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutUserDataInput!
}

input ResultUpsertWithWhereUniqueWithoutUserInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutUserDataInput!
  create: ResultCreateWithoutUserInput!
}

input ResultWhereInput {
  """Logical AND on all given filters."""
  AND: [ResultWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResultWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResultWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  data: String

  """All values that are not equal to given value."""
  data_not: String

  """All values that are contained in given list."""
  data_in: [String!]

  """All values that are not contained in given list."""
  data_not_in: [String!]

  """All values less than the given value."""
  data_lt: String

  """All values less than or equal the given value."""
  data_lte: String

  """All values greater than the given value."""
  data_gt: String

  """All values greater than or equal the given value."""
  data_gte: String

  """All values containing the given string."""
  data_contains: String

  """All values not containing the given string."""
  data_not_contains: String

  """All values starting with the given string."""
  data_starts_with: String

  """All values not starting with the given string."""
  data_not_starts_with: String

  """All values ending with the given string."""
  data_ends_with: String

  """All values not ending with the given string."""
  data_not_ends_with: String
  experiment: ExperimentWhereInput
  user: ProfileWhereInput
}

input ResultWhereUniqueInput {
  id: ID
}

type School implements Node {
  id: ID!
  title: String!
  description: String
  image: String
  largeImage: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SchoolConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SchoolEdge]!
  aggregate: AggregateSchool!
}

input SchoolCreateInput {
  id: ID
  title: String!
  description: String
  image: String
  largeImage: String
}

"""An edge in a connection."""
type SchoolEdge {
  """The item at the end of the edge."""
  node: School!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SchoolOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  largeImage_ASC
  largeImage_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SchoolPreviousValues {
  id: ID!
  title: String!
  description: String
  image: String
  largeImage: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SchoolSubscriptionPayload {
  mutation: MutationType!
  node: School
  updatedFields: [String!]
  previousValues: SchoolPreviousValues
}

input SchoolSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SchoolSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SchoolSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SchoolSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SchoolWhereInput
}

input SchoolUpdateInput {
  title: String
  description: String
  image: String
  largeImage: String
}

input SchoolUpdateManyMutationInput {
  title: String
  description: String
  image: String
  largeImage: String
}

input SchoolWhereInput {
  """Logical AND on all given filters."""
  AND: [SchoolWhereInput!]

  """Logical OR on all given filters."""
  OR: [SchoolWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SchoolWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input SchoolWhereUniqueInput {
  id: ID
}

type Subscription {
  authEmail(where: AuthEmailSubscriptionWhereInput): AuthEmailSubscriptionPayload
  authToken(where: AuthTokenSubscriptionWhereInput): AuthTokenSubscriptionPayload
  authInvite(where: AuthInviteSubscriptionWhereInput): AuthInviteSubscriptionPayload
  school(where: SchoolSubscriptionWhereInput): SchoolSubscriptionPayload
  result(where: ResultSubscriptionWhereInput): ResultSubscriptionPayload
  experiment(where: ExperimentSubscriptionWhereInput): ExperimentSubscriptionPayload
  profile(where: ProfileSubscriptionWhereInput): ProfileSubscriptionPayload
}
