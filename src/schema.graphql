# import * from './generated/prisma.graphql'

type Query {
  schools: [School]!
  experiments (where: ExperimentWhereInput, orderBy: ExperimentOrderByInput, skip: Int, first: Int): [Experiment]!
  me: Profile
  users: [Profile]!
  experiment(where: ExperimentWhereUniqueInput): Experiment
  myResults: [Result]!
  class(where: ClassWhereUniqueInput): Class
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, first: Int): [Class]!
}

type Mutation {
  emailSignUp(email: String!, password: String!, username: String!): Profile!
  emailLogin(email: String!, password: String!): Profile!
  signout: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(resetToken: String!, password: String!, confirmPassword: String!): Profile!

  tokenSignUp(username: String!, token: String!): Profile!
  tokenLogin(token: String!): Profile!

  inviteSignUp(username: String!, invitedBy: ID!): Profile!
  inviteLogin(username: String!, invitedBy: ID!): Profile!

  createSchool(title: String!, description: String, image: String, largeImage: String): School!

  createClass(title: String!, description: String): Class!
  joinClass(id: ID!): SuccessMessage
  leaveClass(id: ID!): SuccessMessage

  createExperiment(title: String!, description: String, image: String, largeImage: String): Experiment!
  updateExperiment(id: ID!, title: String, description: String): Experiment!
  deleteExperiment(id: ID!): Experiment

  addResult(experimentId: ID!, data: String): Result!
  deleteResult(id: ID!): Result
}

type SuccessMessage {
  message: String
}

type Profile {
  id: ID!
  username: String!
  permissions: [Permission!]!
  results: [Result]!
  studentIn: [Class]!
}
